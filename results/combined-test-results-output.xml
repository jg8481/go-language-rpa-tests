<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.0 (Python 3.12.3 on linux)" generated="2024-05-02T21:18:17.828138" rpa="false" schemaversion="5">
<suite id="s1" name="Generic-Automation" source="/tests/generic-automation.robot">
<test id="s1-t1" name="FUNCTIONAL TESTS SETUP : Start the Prism API Mock Server for the Go Httpstat functional tests and Vegeta Load Tests." line="25">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:18:17.911407" level="INFO">${AUTOMATION_SECTION_NAME} = FUNCTIONAL TESTS SETUP</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:18:17.910348" elapsed="0.001127"/>
</kw>
<arg>FUNCTIONAL TESTS SETUP</arg>
<status status="PASS" start="2024-05-02T21:18:17.909135" elapsed="0.002455"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:17.912303" elapsed="0.000273"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:17.911924" elapsed="0.000755"/>
</kw>
<kw name="Start Prism API Mock Server">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:18:17.914250" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:18:17.913354" elapsed="0.000987"/>
</kw>
<kw name="Download And Install Prism" owner="PrismMockServerLibrary">
<doc>Downloads and installs the Prism tool.</doc>
<status status="PASS" start="2024-05-02T21:18:17.914509" elapsed="5.195004"/>
</kw>
<kw name="Start Prism Mock Server" owner="PrismMockServerLibrary">
<doc>Start the Prism tool and create a mock API server.</doc>
<status status="PASS" start="2024-05-02T21:18:23.109760" elapsed="5.009763"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Prism Mock Server Started</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:28.120038" elapsed="0.000501"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Check the Mock API log found in... ${EXECDIR}/resources/api-application.log</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:28.120894" elapsed="0.000782"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:17.913065" elapsed="10.208850"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:28.123753" elapsed="0.000526"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:28.122812" elapsed="0.001634"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:18:28.125735" elapsed="0.000187"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:28.125167" elapsed="0.001087"/>
</kw>
<tag>Run_All_Tests</tag>
<tag>Tests_Setup</tag>
<status status="PASS" start="2024-05-02T21:18:17.907670" elapsed="10.218783"/>
</test>
<test id="s1-t2" name="CHAOS AND LOAD TESTS SETUP : Start the Toxiproxy TCP Chaos Proxy." line="32">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:18:28.129364" level="INFO">${AUTOMATION_SECTION_NAME} = CHAOS AND LOAD TESTS SETUP</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:18:28.128855" elapsed="0.000582"/>
</kw>
<arg>CHAOS AND LOAD TESTS SETUP</arg>
<status status="PASS" start="2024-05-02T21:18:28.128364" elapsed="0.001212"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:28.130362" elapsed="0.000254"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:28.129875" elapsed="0.000921"/>
</kw>
<kw name="Start Toxiproxy TCP Proxy">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:18:28.133256" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/toxiproxy.log"&gt;/tests/resources/toxiproxy.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/toxiproxy.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:18:28.131651" elapsed="0.001734"/>
</kw>
<kw name="Start Toxiproxy Server" owner="ToxiproxyChaosTestLibrary">
<doc>Start the Toxiproxy server.</doc>
<status status="PASS" start="2024-05-02T21:18:28.133610" elapsed="5.003734"/>
</kw>
<kw name="Create TCP Chaos Proxy" owner="ToxiproxyChaosTestLibrary">
<doc>Create a TCP Chaos Proxy for the Vegeta load tests.</doc>
<status status="PASS" start="2024-05-02T21:18:33.137759" elapsed="5.008446"/>
</kw>
<kw name="Add Limited Bandwidth Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Limited Bandwidth Toxic to the Vegeta load tests. It will limit a connection to a maximum number of kilobytes per second.</doc>
<status status="PASS" start="2024-05-02T21:18:38.146700" elapsed="5.009996"/>
</kw>
<kw name="Add Slow Close Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Slow Close Toxic to the Vegeta load tests. It will delay the TCP socket from closing until delay has elapsed.</doc>
<status status="PASS" start="2024-05-02T21:18:43.157219" elapsed="4.993009"/>
</kw>
<kw name="Add Latency Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Latency Toxic to the Vegeta load tests. It will add a delay to all data going through the proxy.</doc>
<status status="PASS" start="2024-05-02T21:18:48.150808" elapsed="5.007048"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Toxiproxy Server Started</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:53.158172" elapsed="0.000288"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Check the Toxiproxy log found in... ${EXECDIR}/resources/toxiproxy.log</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:53.158638" elapsed="0.000326"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:28.131319" elapsed="25.027888"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:53.160085" elapsed="0.000281"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:53.159571" elapsed="0.000896"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:18:53.161392" elapsed="0.000132"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:53.160969" elapsed="0.000653"/>
</kw>
<tag>Run_All_Tests</tag>
<tag>Tests_Setup</tag>
<status status="PASS" start="2024-05-02T21:18:28.127340" elapsed="25.034460"/>
</test>
<test id="s1-t3" name="MODEL-BASED CHAOS TESTS SETUP : Create a new Graphwalker Path File for the Model-Based Chaos Tests. The Graphwalker Model combines API Functional Test, Chaos Test, and Mutational Fuzz Test strategies." line="39">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:18:53.164084" level="INFO">${AUTOMATION_SECTION_NAME} = MODEL-BASED CHAOS TESTS SETUP</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:18:53.163770" elapsed="0.000380"/>
</kw>
<arg>MODEL-BASED CHAOS TESTS SETUP</arg>
<status status="PASS" start="2024-05-02T21:18:53.163315" elapsed="0.001573"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:53.165456" elapsed="0.000275"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:53.165164" elapsed="0.000667"/>
</kw>
<kw name="Create Graphwalker Path File">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:18:53.168381" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/GraphwalkerPath.csv"&gt;/tests/resources/GraphwalkerPath.csv&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/GraphwalkerPath.csv</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:18:53.166982" elapsed="0.001567"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:18:53.169767" level="INFO">Running command 'java -jar /usr/bin/graphwalker-cli-4.3.2.jar offline --start-element send_get_request_to_user_endpoint --model /tests/resources/GraphwalkerModel.graphml "random(edge_coverage(100))" | jq -r '.currentElementName' &gt;&gt; /tests/resources/GraphwalkerPath.csv'.</msg>
<arg>java -jar /usr/bin/graphwalker-cli-4.3.2.jar offline --start-element send_get_request_to_user_endpoint --model ${EXECDIR}/resources/GraphwalkerModel.graphml "random(edge_coverage(100))" | jq -r '.currentElementName' &gt;&gt; ${EXECDIR}/resources/GraphwalkerPath.csv</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:18:53.169003" elapsed="2.882442"/>
</kw>
<arg>Run</arg>
<arg>java -jar /usr/bin/graphwalker-cli-4.3.2.jar offline --start-element send_get_request_to_user_endpoint --model ${EXECDIR}/resources/GraphwalkerModel.graphml "random(edge_coverage(100))" | jq -r '.currentElementName' &gt;&gt; ${EXECDIR}/resources/GraphwalkerPath.csv</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:18:53.168815" elapsed="2.882781"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Graphwalker Path File Created</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:56.051878" elapsed="0.000239"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Check the Graphwalker Path File found in... ${EXECDIR}/resources/GraphwalkerPath.csv</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:56.052258" elapsed="0.000357"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:53.166182" elapsed="2.886587"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:56.053366" elapsed="0.000218"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:56.053067" elapsed="0.000714"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:18:56.054699" elapsed="0.000142"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:56.054279" elapsed="0.000672"/>
</kw>
<tag>Run_All_Tests</tag>
<tag>Tests_Setup</tag>
<status status="PASS" start="2024-05-02T21:18:53.162273" elapsed="2.892810"/>
</test>
<test id="s1-t4" name="MODEL-BASED CHAOS TESTS RUNNER : Run the Graphwalker Path File for the Model-Based Chaos Tests. The Graphwalker Model combines API Functional Test, Chaos Test, and Mutational Fuzz Test strategies." line="46">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:18:56.057951" level="INFO">${AUTOMATION_SECTION_NAME} = MODEL-BASED CHAOS TESTS RUNNER</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:18:56.057411" elapsed="0.000603"/>
</kw>
<arg>MODEL-BASED CHAOS TESTS RUNNER</arg>
<status status="PASS" start="2024-05-02T21:18:56.056790" elapsed="0.001317"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:18:56.058616" elapsed="0.000232"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:56.058324" elapsed="0.000603"/>
</kw>
<kw name="Run Graphwalker Model Based Tests">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:18:56.059681" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/GraphwalkerPath.csv"&gt;/tests/resources/GraphwalkerPath.csv&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:18:56.060960" level="INFO">${GRAPHWALKER_CSV_FILE_CONTENTS} = send_get_request_to_user_endpoint
check_api_response_log_files
send_post_request_to_user_endpoint
check_server_log_files
send_get_request_to_pets_endpoint
check_api_response_log_files
send_post_reques...</msg>
<var>${GRAPHWALKER_CSV_FILE_CONTENTS}</var>
<arg>${EXECDIR}/resources/${GRAPHWALKER_CSV_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:18:56.059434" elapsed="0.001571"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:18:56.061337" level="INFO">send_get_request_to_user_endpoint
check_api_response_log_files
send_post_request_to_user_endpoint
check_server_log_files
send_get_request_to_pets_endpoint
check_api_response_log_files
send_post_request_to_user_endpoint
check_server_log_files
send_post_request_to_order_endpoint_with_fuzzed_data
check_server_log_files
send_get_request_to_pets_endpoint
check_api_response_log_files
send_post_request_to_order_endpoint
check_server_log_files
send_post_request_to_user_endpoint_with_fuzzed_data
check_server_log_files
restart_server
check_server_log_files
send_post_request_to_order_endpoint_with_fuzzed_data
check_server_log_files
send_post_request_to_user_endpoint_with_fuzzed_data
check_server_log_files
restart_server
check_server_log_files
send_post_request_to_order_endpoint_with_fuzzed_data
check_server_log_files
send_post_request_to_user_endpoint_with_fuzzed_data
check_server_log_files
send_get_request_to_pets_endpoint
check_api_response_log_files
add_toxiproxy_limited_bandwidth_then_send_user_get_request
check_api_response_log_files
add_toxiproxy_slow_close_then_send_user_get_request
check_api_response_log_files
add_toxiproxy_limited_bandwidth_then_send_user_get_request
check_api_response_log_files
send_post_request_to_user_endpoint
check_server_log_files
send_post_request_to_user_endpoint_with_fuzzed_data
check_server_log_files
restart_server
check_server_log_files
restart_server
check_server_log_files
send_post_request_to_order_endpoint_with_fuzzed_data
check_server_log_files
send_get_request_to_order_endpoint
check_api_response_log_files
send_post_request_to_order_endpoint
check_server_log_files
send_post_request_to_user_endpoint_with_fuzzed_data
check_server_log_files
send_get_request_to_pets_endpoint
check_api_response_log_files
add_toxiproxy_limited_bandwidth_then_send_user_get_request
check_api_response_log_files
add_toxiproxy_latency_then_send_user_get_request
check_api_response_log_files
</msg>
<arg>${GRAPHWALKER_CSV_FILE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:18:56.061181" elapsed="0.000228"/>
</kw>
<kw name="Get Graphwalker Path Keywords From CSV File">
<kw name="Split To Lines" owner="String">
<msg time="2024-05-02T21:18:56.062073" level="INFO">58 lines returned</msg>
<msg time="2024-05-02T21:18:56.062739" level="INFO">@{GRAPHWALKER_LINES} = [ send_get_request_to_user_endpoint | check_api_response_log_files | send_post_request_to_user_endpoint | check_server_log_files | send_get_request_to_pets_endpoint | check_api_response_log_files | se...</msg>
<var>@{GRAPHWALKER_LINES}</var>
<arg>${GRAPHWALKER_CSV_CONTENT}</arg>
<doc>Splits the given string to lines.</doc>
<status status="PASS" start="2024-05-02T21:18:56.061924" elapsed="0.000853"/>
</kw>
<return>
<value>@{GRAPHWALKER_LINES}</value>
<status status="PASS" start="2024-05-02T21:18:56.062863" elapsed="0.000083"/>
</return>
<msg time="2024-05-02T21:18:56.063153" level="INFO">@{GRAPHWALKER_PATH_LINES} = [ send_get_request_to_user_endpoint | check_api_response_log_files | send_post_request_to_user_endpoint | check_server_log_files | send_get_request_to_pets_endpoint | check_api_response_log_files | se...</msg>
<var>@{GRAPHWALKER_PATH_LINES}</var>
<arg>${GRAPHWALKER_CSV_FILE_CONTENTS}</arg>
<status status="PASS" start="2024-05-02T21:18:56.061574" elapsed="0.001610"/>
</kw>
<kw name="Run Graphwalker Path Keywords">
<for flavor="IN">
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_user_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:18:56.065920" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:18:56.065204" elapsed="0.000800"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:18:56.067009" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/user/vitae" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:18:56.066352" elapsed="10.682127"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:18:56.066178" elapsed="10.682539"/>
</kw>
<arg>http://0.0.0.0:8080/user/vitae</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:18:56.064953" elapsed="10.683874"/>
</kw>
<status status="PASS" start="2024-05-02T21:18:56.064632" elapsed="10.684265"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:18:56.064196" elapsed="10.684759"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_user_endpoint</var>
<status status="PASS" start="2024-05-02T21:18:56.064011" elapsed="10.684989"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:06.750278" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:06.751746" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/user/vitae
Method: GET
Status Code: 200
--------------
Response Body:
{"id":-9007199254740991,"username":"string","firstName":"string","lastName":"string","emai...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:06.750107" elapsed="0.001686"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:06.752148" level="INFO">--------------
URL: http://0.0.0.0:8080/user/vitae
Method: GET
Status Code: 200
--------------
Response Body:
{"id":-9007199254740991,"username":"string","firstName":"string","lastName":"string","email":"string","password":"string","phone":"string","userStatus":-2147483648}
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10079 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10079 ms
Total:          10079 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:06.751982" elapsed="0.000221"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:06.752325" elapsed="0.000159"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:06.749830" elapsed="0.002744"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:06.749349" elapsed="0.003280"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:19:06.749190" elapsed="0.003482"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint">
<kw name="Run HTTPStat POST Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:06.754486" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:19:06.753768" elapsed="0.000816"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:06.756074" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/user" -method "POST" -body '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:06.755097" elapsed="10.332436"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:06.754891" elapsed="10.332971"/>
</kw>
<arg>http://0.0.0.0:8080/user</arg>
<arg>POST</arg>
<arg>'{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}'</arg>
<status status="PASS" start="2024-05-02T21:19:06.753511" elapsed="10.334511"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:06.753270" elapsed="10.334849"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:06.752906" elapsed="10.335289"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint</var>
<status status="PASS" start="2024-05-02T21:19:06.752803" elapsed="10.336506"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:17.090854" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:17.092433" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:17.090651" elapsed="0.001843"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:17.092906" level="INFO">[9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:17.092711" elapsed="0.000293"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:17.093136" elapsed="0.000164"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:17.090231" elapsed="0.003193"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:17.089775" elapsed="0.003964"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:19:17.089579" elapsed="0.004303"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_pets_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:17.096167" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:19:17.095244" elapsed="0.001089"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:17.097862" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:17.096725" elapsed="10.324895"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:17.096529" elapsed="10.325328"/>
</kw>
<arg>http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:19:17.094962" elapsed="10.327034"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:17.094693" elapsed="10.327372"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:17.094269" elapsed="10.327853"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_pets_endpoint</var>
<status status="PASS" start="2024-05-02T21:19:17.094108" elapsed="10.328060"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:27.423412" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:27.424800" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:27.423249" elapsed="0.001609"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:27.425233" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10020 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10020 ms
Total:          10020 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:27.425059" elapsed="0.000786"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:27.426026" elapsed="0.000196"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:27.422980" elapsed="0.003343"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:27.422516" elapsed="0.003864"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:19:27.422349" elapsed="0.004075"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint">
<kw name="Run HTTPStat POST Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:27.428311" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:19:27.427655" elapsed="0.000777"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:27.430891" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/user" -method "POST" -body '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:27.428856" elapsed="10.312076"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:27.428675" elapsed="10.312418"/>
</kw>
<arg>http://0.0.0.0:8080/user</arg>
<arg>POST</arg>
<arg>'{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}'</arg>
<status status="PASS" start="2024-05-02T21:19:27.427351" elapsed="10.313853"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:27.427096" elapsed="10.314192"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:27.426782" elapsed="10.314568"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint</var>
<status status="PASS" start="2024-05-02T21:19:27.426650" elapsed="10.314750"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:37.742672" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:37.743637" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:37.742510" elapsed="0.001170"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:37.743990" level="INFO">[9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:37.743837" elapsed="0.000256"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:37.744220" elapsed="0.000158"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:37.742222" elapsed="0.002240"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:37.741865" elapsed="0.002651"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:19:37.741671" elapsed="0.002887"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:37.746891" level="INFO">Running command 'echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; /tests/resources/mutational-fuzz-data-order-test.dat'.</msg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:37.746229" elapsed="0.011198"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:37.746083" elapsed="0.011483"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:37.758960" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:37.758036" elapsed="10.013837"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:37.757827" elapsed="10.014217"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.773734" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:47.772682" elapsed="0.006354"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:47.772411" elapsed="0.006826"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.781182" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:47.779931" elapsed="0.003280"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:47.779513" elapsed="0.003828"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.784681" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-order-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:47.783775" elapsed="0.004559"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:47.783555" elapsed="0.004908"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.789531" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:47.788867" elapsed="0.002675"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:47.788665" elapsed="0.003038"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:37.745846" elapsed="10.045956"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:37.745516" elapsed="10.046348"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:19:37.745378" elapsed="10.046532"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.792978" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:47.793781" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:47.792828" elapsed="0.001000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:47.794198" level="INFO">[9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:47.793993" elapsed="0.000840"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:47.795012" elapsed="0.000252"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:47.792593" elapsed="0.002776"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:47.792254" elapsed="0.003173"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:19:47.792069" elapsed="0.003404"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_pets_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.797525" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:19:47.796685" elapsed="0.000958"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:47.798862" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:47.798104" elapsed="10.325395"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:47.797869" elapsed="10.325792"/>
</kw>
<arg>http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:19:47.796359" elapsed="10.327423"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:47.796059" elapsed="10.327844"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:47.795738" elapsed="10.328232"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_pets_endpoint</var>
<status status="PASS" start="2024-05-02T21:19:47.795609" elapsed="10.328412"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:58.125236" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:19:58.126671" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:19:58.125070" elapsed="0.001646"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:19:58.127070" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10012 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10012 ms
Total:          10012 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:19:58.126905" elapsed="0.000225"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:19:58.127355" elapsed="0.000180"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:58.124810" elapsed="0.002824"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:58.124438" elapsed="0.003257"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:19:58.124195" elapsed="0.003549"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint">
<kw name="Run HTTPStat POST Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:19:58.130222" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:19:58.129649" elapsed="0.000655"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:19:58.131284" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/store/order" -method "POST" -body '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:19:58.130620" elapsed="10.318096"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:19:58.130455" elapsed="10.318410"/>
</kw>
<arg>http://0.0.0.0:8080/store/order</arg>
<arg>POST</arg>
<arg>'{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}'</arg>
<status status="PASS" start="2024-05-02T21:19:58.128592" elapsed="10.320384"/>
</kw>
<status status="PASS" start="2024-05-02T21:19:58.128327" elapsed="10.320735"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:19:58.127987" elapsed="10.321208"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint</var>
<status status="PASS" start="2024-05-02T21:19:58.127873" elapsed="10.321382"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:20:08.450612" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:20:08.451697" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:20:08.450429" elapsed="0.001318"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:20:08.452082" level="INFO">[9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:20:08.451914" elapsed="0.000340"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:20:08.452395" elapsed="0.000260"/>
</kw>
<status status="PASS" start="2024-05-02T21:20:08.449958" elapsed="0.002857"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:20:08.449593" elapsed="0.003367"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:20:08.449433" elapsed="0.003577"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:08.454958" level="INFO">Running command 'echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; /tests/resources/mutational-fuzz-data-user-test.dat'.</msg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:08.454132" elapsed="0.011614"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:08.453986" elapsed="0.011904"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:08.467678" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:08.466585" elapsed="10.020627"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:08.466250" elapsed="10.021274"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.489339" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:18.488161" elapsed="0.006324"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:18.487830" elapsed="0.006862"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.496541" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:18.495284" elapsed="0.003849"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:18.495035" elapsed="0.004424"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.500858" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-user-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:18.499979" elapsed="0.006497"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:18.499737" elapsed="0.006870"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.507750" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:20:18.507007" elapsed="0.002762"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:18.506821" elapsed="0.003116"/>
</kw>
<status status="PASS" start="2024-05-02T21:20:08.453747" elapsed="10.056380"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:20:08.453415" elapsed="10.056894"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:20:08.453270" elapsed="10.057102"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.512004" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:20:18.512896" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:20:18.511829" elapsed="0.001113"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:20:18.513296" level="INFO">[9:18:24 PM] › [CLI] …  awaiting  Starting Prism…
[9:18:24 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:20:18.513124" elapsed="0.000941"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:20:18.514329" elapsed="0.000244"/>
</kw>
<status status="PASS" start="2024-05-02T21:20:18.511515" elapsed="0.003171"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:20:18.510767" elapsed="0.003983"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:20:18.510580" elapsed="0.004217"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="restart_server">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:20:18.516249" level="FAIL">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</msg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="FAIL" start="2024-05-02T21:20:18.516008" elapsed="0.000308">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</status>
</kw>
<arg>Run</arg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:20:18.515801" elapsed="0.000637"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:20:48.517298" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:20:18.516697" elapsed="30.000725"/>
</kw>
<kw name="Start Prism Mock Server" owner="PrismMockServerLibrary">
<doc>Start the Prism tool and create a mock API server.</doc>
<status status="PASS" start="2024-05-02T21:20:48.517634" elapsed="5.004884"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:21:23.524058" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:20:53.523124" elapsed="30.001138"/>
</kw>
<status status="PASS" start="2024-05-02T21:20:18.515440" elapsed="65.009049"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:20:18.515066" elapsed="65.009533"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">restart_server</var>
<status status="PASS" start="2024-05-02T21:20:18.514943" elapsed="65.009758"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:21:23.527314" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:21:23.528649" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:21:23.527079" elapsed="0.001635"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:21:23.529264" level="INFO">[9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:21:23.529036" elapsed="0.001059"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:21:23.530317" elapsed="0.000259"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:23.526199" elapsed="0.004513"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:23.525449" elapsed="0.005347"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:21:23.525050" elapsed="0.005812"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:23.533390" level="INFO">Running command 'echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; /tests/resources/mutational-fuzz-data-order-test.dat'.</msg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:23.532391" elapsed="0.011102"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:23.532168" elapsed="0.011471"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:23.544971" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:23.544140" elapsed="10.021222"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:23.543924" elapsed="10.021678"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.568194" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.566539" elapsed="0.007747"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.566146" elapsed="0.008365"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.576201" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.575292" elapsed="0.003041"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.574970" elapsed="0.003484"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.579844" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-order-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.578960" elapsed="0.005196"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.578666" elapsed="0.006557"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.586581" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.585886" elapsed="0.002345"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.585522" elapsed="0.002811"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:23.531767" elapsed="10.056659"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:23.531307" elapsed="10.057184"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:21:23.531138" elapsed="10.057404"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.589788" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:21:33.590548" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:21:33.589634" elapsed="0.000960"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:21:33.590976" level="INFO">[9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:21:33.590751" elapsed="0.000322"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:21:33.591202" elapsed="0.000156"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:33.589373" elapsed="0.002068"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:33.588834" elapsed="0.002662"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:21:33.588697" elapsed="0.002842"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.593172" level="INFO">Running command 'echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; /tests/resources/mutational-fuzz-data-user-test.dat'.</msg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.592502" elapsed="0.010796"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.592353" elapsed="0.011076"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:33.604667" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:33.603802" elapsed="10.019881"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:33.603611" elapsed="10.020402"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.626456" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:43.625308" elapsed="0.006620"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:43.625024" elapsed="0.007142"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.634603" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:43.633091" elapsed="0.004338"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:43.632560" elapsed="0.005118"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.639431" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-user-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:43.638495" elapsed="0.005464"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:43.638096" elapsed="0.006005"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.645272" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:21:43.644501" elapsed="0.002482"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:43.644303" elapsed="0.002782"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:33.592110" elapsed="10.055062"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:33.591759" elapsed="10.055472"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:21:33.591652" elapsed="10.055624"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.648404" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:21:43.649263" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:21:43.648209" elapsed="0.001103"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:21:43.649661" level="INFO">[9:20:49 PM] › [CLI] …  awaiting  Starting Prism…
[9:20:49 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:21:43.649489" elapsed="0.000269"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:21:43.649887" elapsed="0.000207"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:43.647963" elapsed="0.002799"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:43.647562" elapsed="0.003265"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:21:43.647429" elapsed="0.003444"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="restart_server">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:21:43.652597" level="FAIL">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</msg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="FAIL" start="2024-05-02T21:21:43.652408" elapsed="0.000234">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</status>
</kw>
<arg>Run</arg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:21:43.652202" elapsed="0.000541"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:22:13.654869" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:21:43.652875" elapsed="30.002212"/>
</kw>
<kw name="Start Prism Mock Server" owner="PrismMockServerLibrary">
<doc>Start the Prism tool and create a mock API server.</doc>
<status status="PASS" start="2024-05-02T21:22:13.655540" elapsed="5.008244"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:22:48.666670" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:22:18.664847" elapsed="30.001953"/>
</kw>
<status status="PASS" start="2024-05-02T21:21:43.651468" elapsed="65.015454"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:21:43.651119" elapsed="65.015865"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">restart_server</var>
<status status="PASS" start="2024-05-02T21:21:43.651004" elapsed="65.016084"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:22:48.668530" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:22:48.669909" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:22:48.668336" elapsed="0.001617"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:22:48.670271" level="INFO">[9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:22:48.670115" elapsed="0.000247"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:22:48.670483" elapsed="0.000331"/>
</kw>
<status status="PASS" start="2024-05-02T21:22:48.667992" elapsed="0.002911"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:22:48.667397" elapsed="0.003560"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:22:48.667254" elapsed="0.003744"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:48.672838" level="INFO">Running command 'echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; /tests/resources/mutational-fuzz-data-order-test.dat'.</msg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:48.671957" elapsed="0.026332"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:48.671732" elapsed="0.026699"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:48.700357" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:48.699492" elapsed="10.013358"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:48.698714" elapsed="10.014315"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.714829" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.713666" elapsed="0.006348"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.713292" elapsed="0.006874"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.721727" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.720628" elapsed="0.003265"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.720397" elapsed="0.003625"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.725186" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-order-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.724438" elapsed="0.004374"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.724230" elapsed="0.004690"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.729913" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.729282" elapsed="0.002358"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.729099" elapsed="0.002656"/>
</kw>
<status status="PASS" start="2024-05-02T21:22:48.671500" elapsed="10.060345"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:22:48.671212" elapsed="10.060692"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:22:48.671112" elapsed="10.060837"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.732983" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:22:58.733594" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:22:58.732826" elapsed="0.000809"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:22:58.733923" level="INFO">[9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:22:58.733772" elapsed="0.000652"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:22:58.734660" elapsed="0.000203"/>
</kw>
<status status="PASS" start="2024-05-02T21:22:58.732555" elapsed="0.002406"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:22:58.732236" elapsed="0.002784"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:22:58.732101" elapsed="0.002964"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.737102" level="INFO">Running command 'echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; /tests/resources/mutational-fuzz-data-user-test.dat'.</msg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.736156" elapsed="0.017786"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.735999" elapsed="0.018082"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:22:58.755229" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:22:58.754469" elapsed="10.016319"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:22:58.754275" elapsed="10.016677"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.772399" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:23:08.771387" elapsed="0.005267"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:23:08.771172" elapsed="0.005625"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.778096" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:23:08.777220" elapsed="0.002985"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:23:08.777006" elapsed="0.003352"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.781548" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-user-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:23:08.780868" elapsed="0.004290"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:23:08.780653" elapsed="0.005464"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.787561" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:23:08.786801" elapsed="0.002430"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:23:08.786436" elapsed="0.002913"/>
</kw>
<status status="PASS" start="2024-05-02T21:22:58.735731" elapsed="10.053712"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:22:58.735316" elapsed="10.054187"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:22:58.735197" elapsed="10.054350"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.790856" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:23:08.791991" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:23:08.790632" elapsed="0.001414"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:23:08.792413" level="INFO">[9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:23:08.792236" elapsed="0.000271"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:23:08.792634" elapsed="0.000221"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:08.790266" elapsed="0.002689"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:08.789913" elapsed="0.003101"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:23:08.789759" elapsed="0.003299"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_pets_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.794877" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:23:08.794138" elapsed="0.000809"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:23:08.795925" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:23:08.795250" elapsed="10.318749"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:23:08.795095" elapsed="10.319069"/>
</kw>
<arg>http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:23:08.793884" elapsed="10.320398"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:08.793584" elapsed="10.320784"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:08.793299" elapsed="10.321138"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_pets_endpoint</var>
<status status="PASS" start="2024-05-02T21:23:08.793186" elapsed="10.321308"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:23:19.116587" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:23:19.118106" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:23:19.116389" elapsed="0.001778"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:23:19.118629" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10008 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:23:19.118417" elapsed="0.000282"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:23:19.118931" elapsed="0.000342"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:19.115988" elapsed="0.003458"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:19.115566" elapsed="0.003954"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:23:19.115374" elapsed="0.004196"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="add_toxiproxy_limited_bandwidth_then_send_user_get_request">
<kw name="Remove All Three Toxics" owner="ToxiproxyChaosTestLibrary">
<doc>Remove all three toxics from the exploratory-testing-proxy.</doc>
<status status="PASS" start="2024-05-02T21:23:19.120544" elapsed="5.018815"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:23:54.141467" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:23:24.139785" elapsed="30.001884"/>
</kw>
<kw name="Add Limited Bandwidth Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Limited Bandwidth Toxic to the Vegeta load tests. It will limit a connection to a maximum number of kilobytes per second.</doc>
<status status="PASS" start="2024-05-02T21:23:54.142058" elapsed="5.006437"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:19.120262" elapsed="40.028517"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:19.119872" elapsed="40.029040"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">add_toxiproxy_limited_bandwidth_then_send_user_get_request</var>
<status status="PASS" start="2024-05-02T21:23:19.119728" elapsed="40.029269"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:23:59.151482" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:23:59.153678" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:23:59.151123" elapsed="0.002636"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:23:59.154575" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10008 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:23:59.154254" elapsed="0.000451"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:23:59.154899" elapsed="0.000292"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:59.150477" elapsed="0.004854"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:59.149712" elapsed="0.005700"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:23:59.149446" elapsed="0.006030"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="add_toxiproxy_slow_close_then_send_user_get_request">
<kw name="Remove All Three Toxics" owner="ToxiproxyChaosTestLibrary">
<doc>Remove all three toxics from the exploratory-testing-proxy.</doc>
<status status="PASS" start="2024-05-02T21:23:59.156892" elapsed="5.015471"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:24:34.173858" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:24:04.172813" elapsed="30.001311"/>
</kw>
<kw name="Add Slow Close Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Slow Close Toxic to the Vegeta load tests. It will delay the TCP socket from closing until delay has elapsed.</doc>
<status status="PASS" start="2024-05-02T21:24:34.174747" elapsed="5.008876"/>
</kw>
<status status="PASS" start="2024-05-02T21:23:59.156295" elapsed="40.027501"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:23:59.155810" elapsed="40.028064"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">add_toxiproxy_slow_close_then_send_user_get_request</var>
<status status="PASS" start="2024-05-02T21:23:59.155650" elapsed="40.028283"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:24:39.185299" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:24:39.188438" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:24:39.185106" elapsed="0.003414"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:24:39.188916" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10008 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:24:39.188731" elapsed="0.000247"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:24:39.189117" elapsed="0.000176"/>
</kw>
<status status="PASS" start="2024-05-02T21:24:39.184801" elapsed="0.004650"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:24:39.184295" elapsed="0.005234"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:24:39.184122" elapsed="0.005472"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="add_toxiproxy_limited_bandwidth_then_send_user_get_request">
<kw name="Remove All Three Toxics" owner="ToxiproxyChaosTestLibrary">
<doc>Remove all three toxics from the exploratory-testing-proxy.</doc>
<status status="PASS" start="2024-05-02T21:24:39.190496" elapsed="5.015140"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:25:14.207046" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:24:44.205895" elapsed="30.001455"/>
</kw>
<kw name="Add Limited Bandwidth Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Limited Bandwidth Toxic to the Vegeta load tests. It will limit a connection to a maximum number of kilobytes per second.</doc>
<status status="PASS" start="2024-05-02T21:25:14.207963" elapsed="5.009848"/>
</kw>
<status status="PASS" start="2024-05-02T21:24:39.190195" elapsed="40.027952"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:24:39.189865" elapsed="40.028602"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">add_toxiproxy_limited_bandwidth_then_send_user_get_request</var>
<status status="PASS" start="2024-05-02T21:24:39.189740" elapsed="40.028884"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:25:19.221250" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:25:19.223856" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:25:19.220932" elapsed="0.003007"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:25:19.224648" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10008 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:25:19.224391" elapsed="0.000352"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:25:19.224957" elapsed="0.000275"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:19.220418" elapsed="0.005036"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:19.219486" elapsed="0.006061"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:25:19.219014" elapsed="0.006608"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint">
<kw name="Run HTTPStat POST Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:25:19.228458" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:25:19.227465" elapsed="0.001100"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:19.230199" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/user" -method "POST" -body '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:19.229024" elapsed="10.375947"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:19.228783" elapsed="10.376342"/>
</kw>
<arg>http://0.0.0.0:8080/user</arg>
<arg>POST</arg>
<arg>'{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}'</arg>
<status status="PASS" start="2024-05-02T21:25:19.226933" elapsed="10.379618"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:19.226529" elapsed="10.380137"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:19.226000" elapsed="10.380744"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint</var>
<status status="PASS" start="2024-05-02T21:25:19.225813" elapsed="10.380992"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:25:29.608341" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:25:29.609792" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:25:29.608102" elapsed="0.001741"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:25:29.610200" level="INFO">[9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:25:29.610022" elapsed="0.000382"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:25:29.610570" elapsed="0.000218"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:29.607784" elapsed="0.003100"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:29.607159" elapsed="0.003782"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:25:29.606989" elapsed="0.003999"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:29.613063" level="INFO">Running command 'echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; /tests/resources/mutational-fuzz-data-user-test.dat'.</msg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:29.612108" elapsed="0.009385"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:29.611937" elapsed="0.009690"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:29.622731" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:29.622015" elapsed="10.020486"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:29.621824" elapsed="10.020975"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.645638" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:39.643875" elapsed="0.008601"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:39.643266" elapsed="0.010117"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.654620" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:39.653795" elapsed="0.002724"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:39.653593" elapsed="0.003045"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.657841" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-user-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:39.657008" elapsed="0.004819"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:39.656819" elapsed="0.005118"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.663089" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:25:39.662373" elapsed="0.002446"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:39.662121" elapsed="0.002817"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:29.611633" elapsed="10.053399"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:29.611222" elapsed="10.053885"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:25:29.611110" elapsed="10.054043"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.666244" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:25:39.667035" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:25:39.666095" elapsed="0.000982"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:25:39.667431" level="INFO">[9:22:14 PM] › [CLI] …  awaiting  Starting Prism…
[9:22:14 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:25:39.667280" elapsed="0.000246"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:25:39.667649" elapsed="0.000156"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:39.665860" elapsed="0.002029"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:39.665535" elapsed="0.002406"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:25:39.665394" elapsed="0.002590"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="restart_server">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:25:39.669028" level="FAIL">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</msg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="FAIL" start="2024-05-02T21:25:39.668924" elapsed="0.000604">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</status>
</kw>
<arg>Run</arg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:25:39.668781" elapsed="0.000839"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:26:09.671286" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:25:39.669745" elapsed="30.001675"/>
</kw>
<kw name="Start Prism Mock Server" owner="PrismMockServerLibrary">
<doc>Start the Prism tool and create a mock API server.</doc>
<status status="PASS" start="2024-05-02T21:26:09.671655" elapsed="5.005123"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:26:44.678989" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:26:14.677409" elapsed="30.001838"/>
</kw>
<status status="PASS" start="2024-05-02T21:25:39.668551" elapsed="65.011101"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:25:39.668209" elapsed="65.011618"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">restart_server</var>
<status status="PASS" start="2024-05-02T21:25:39.668094" elapsed="65.011867"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:26:44.682645" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:26:44.685096" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:26:10 PM] › [CLI] …  awaiting  Starting Prism…
[9:26:10 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:26:44.682231" elapsed="0.002939"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:26:44.685790" level="INFO">[9:26:10 PM] › [CLI] …  awaiting  Starting Prism…
[9:26:10 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:26:44.685524" elapsed="0.000417"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:26:44.686154" elapsed="0.000347"/>
</kw>
<status status="PASS" start="2024-05-02T21:26:44.681714" elapsed="0.004946"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:26:44.680789" elapsed="0.005965"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:26:44.680428" elapsed="0.006401"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="restart_server">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:26:44.688617" level="FAIL">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</msg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="FAIL" start="2024-05-02T21:26:44.688462" elapsed="0.000208">Keyword 'OperatingSystem.Run' expected 1 argument, got 3.</status>
</kw>
<arg>Run</arg>
<arg>pkill prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1; pgrep prism | xargs kill &gt; /dev/null 2&gt;&amp;1; killall prism</arg>
<arg>&gt; /dev/null 2&gt;&amp;1</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:26:44.688186" elapsed="0.000596"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:27:14.690291" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:26:44.688968" elapsed="30.001579"/>
</kw>
<kw name="Start Prism Mock Server" owner="PrismMockServerLibrary">
<doc>Start the Prism tool and create a mock API server.</doc>
<status status="PASS" start="2024-05-02T21:27:14.691134" elapsed="5.009302"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:27:49.702213" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:27:19.701062" elapsed="30.001402"/>
</kw>
<status status="PASS" start="2024-05-02T21:26:44.687752" elapsed="65.014991"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:26:44.687195" elapsed="65.015853"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">restart_server</var>
<status status="PASS" start="2024-05-02T21:26:44.687018" elapsed="65.016175"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:27:49.708375" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:27:49.710918" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:27:49.707977" elapsed="0.003033"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:27:49.711644" level="INFO">[9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:27:49.711317" elapsed="0.000494"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:27:49.712099" elapsed="0.000445"/>
</kw>
<status status="PASS" start="2024-05-02T21:27:49.707207" elapsed="0.005516"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:27:49.706208" elapsed="0.006630"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:27:49.705654" elapsed="0.007338"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:49.715732" level="INFO">Running command 'echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; /tests/resources/mutational-fuzz-data-order-test.dat'.</msg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:49.714613" elapsed="0.015018"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:49.714357" elapsed="0.015477"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:49.731024" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:49.730238" elapsed="10.020063"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-order-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-order-test.dat http://0.0.0.0:8080/store/order</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:49.730038" elapsed="10.020452"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.752464" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:59.751220" elapsed="0.006711"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-order-test.dat -- Logged this on.... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:59.750908" elapsed="0.007214"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.759699" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:59.758679" elapsed="0.003157"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:59.758446" elapsed="0.003540"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.763261" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-order-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:59.762424" elapsed="0.005227"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-order-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:59.762213" elapsed="0.005569"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.769025" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-order-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:59.768268" elapsed="0.002289"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-order-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:59.768062" elapsed="0.002618"/>
</kw>
<status status="PASS" start="2024-05-02T21:27:49.713950" elapsed="10.056908"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:27:49.713383" elapsed="10.057540"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:27:49.713198" elapsed="10.057773"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.772328" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:27:59.773546" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:27:59.772096" elapsed="0.001511"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:27:59.774234" level="INFO">[9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:27:59.773981" elapsed="0.000367"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:27:59.774512" elapsed="0.000195"/>
</kw>
<status status="PASS" start="2024-05-02T21:27:59.771609" elapsed="0.003275"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:27:59.771272" elapsed="0.003678"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:27:59.771129" elapsed="0.003867"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_order_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.777592" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:27:59.776375" elapsed="0.001525"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:27:59.780378" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/store/order/9" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:27:59.778712" elapsed="10.329489"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:27:59.778236" elapsed="10.330822"/>
</kw>
<arg>http://0.0.0.0:8080/store/order/9</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:27:59.775985" elapsed="10.333239"/>
</kw>
<status status="PASS" start="2024-05-02T21:27:59.775546" elapsed="10.333764"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:27:59.775244" elapsed="10.334133"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_order_endpoint</var>
<status status="PASS" start="2024-05-02T21:27:59.775128" elapsed="10.334304"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:10.110774" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:28:10.112164" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/store/order/9
Method: GET
Status Code: 200
--------------
Response Body:
{"id":-9007199254740991,"petId":-9007199254740991,"quantity":-2147483648,"shipDate":"20...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:28:10.110590" elapsed="0.001618"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:28:10.112559" level="INFO">--------------
URL: http://0.0.0.0:8080/store/order/9
Method: GET
Status Code: 200
--------------
Response Body:
{"id":-9007199254740991,"petId":-9007199254740991,"quantity":-2147483648,"shipDate":"2019-08-24T14:15:22Z","status":"placed","complete":false}
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10013 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10013 ms
Total:          10014 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:28:10.112390" elapsed="0.000237"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:28:10.112780" elapsed="0.000280"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:10.110292" elapsed="0.002879"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:10.109775" elapsed="0.003460"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:28:10.109610" elapsed="0.003680"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_order_endpoint">
<kw name="Run HTTPStat POST Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:10.115342" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:28:10.114720" elapsed="0.000698"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:10.116757" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/store/order" -method "POST" -body '{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}' &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:10.115867" elapsed="10.324894"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" -body ${REQUEST_BODY} &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:10.115579" elapsed="10.325344"/>
</kw>
<arg>http://0.0.0.0:8080/store/order</arg>
<arg>POST</arg>
<arg>'{"id": 9, "petId": 9, "quantity": 1, "shipDate": "2021-07-29T00:00:00.000Z", "status": "placed", "complete": true}'</arg>
<status status="PASS" start="2024-05-02T21:28:10.114438" elapsed="10.326607"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:10.113940" elapsed="10.327208"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:10.113557" elapsed="10.327665"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_order_endpoint</var>
<status status="PASS" start="2024-05-02T21:28:10.113430" elapsed="10.327853"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:20.442811" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:28:20.444273" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:28:20.442552" elapsed="0.001771"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:28:20.444751" level="INFO">[9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:28:20.444497" elapsed="0.001015"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:28:20.445756" elapsed="0.000204"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:20.442219" elapsed="0.003849"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:20.441674" elapsed="0.004460"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:28:20.441485" elapsed="0.004703"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_post_request_to_user_endpoint_with_fuzzed_data">
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:20.448171" level="INFO">Running command 'echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; /tests/resources/mutational-fuzz-data-user-test.dat'.</msg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:20.447399" elapsed="0.013846"/>
</kw>
<arg>Run</arg>
<arg>echo '{"id": 1, "username": "user1", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com", "password": "123456", "phone": "1234567890", "userStatus": 1}' | radamsa &gt; ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:20.447212" elapsed="0.014163"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:20.462751" level="INFO">Running command 'httpstat -o /tests/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @/tests/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user 2&gt;&amp;1'.</msg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:20.461874" elapsed="10.012135"/>
</kw>
<arg>Run</arg>
<arg>httpstat -o ${EXECDIR}/resources/httpstat-response-mutational-fuzz-data-user-output.json -X POST -H 'Content-Type: application/json' -d @${EXECDIR}/resources/mutational-fuzz-data-user-test.dat http://0.0.0.0:8080/user</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:20.461562" elapsed="10.012595"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.475540" level="INFO">Running command 'TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:30.474610" elapsed="0.004713"/>
</kw>
<arg>Run</arg>
<arg>TIMESTAMP=$(date); echo "======== :: Fuzz Test Data Tracker for mutational-fuzz-data-user-test.dat -- Logged this on... $TIMESTAMP :: ========" &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:30.474383" elapsed="0.005073"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.480707" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:30.479961" elapsed="0.002912"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:30.479750" elapsed="0.003332"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.484635" level="INFO">Running command 'cat /tests/resources/mutational-fuzz-data-user-test.dat &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:30.483847" elapsed="0.004970"/>
</kw>
<arg>Run</arg>
<arg>cat ${EXECDIR}/resources/mutational-fuzz-data-user-test.dat &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:30.483459" elapsed="0.006062"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.490935" level="INFO">Running command 'echo " " &gt;&gt; /tests/results/mutational-fuzz-data-targeted-at-user-endpoint.log'.</msg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:30.490032" elapsed="0.002703"/>
</kw>
<arg>Run</arg>
<arg>echo " " &gt;&gt; ${EXECDIR}/results/mutational-fuzz-data-targeted-at-user-endpoint.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:30.489825" elapsed="0.003076"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:20.446861" elapsed="10.046136"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:20.446450" elapsed="10.046607"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_post_request_to_user_endpoint_with_fuzzed_data</var>
<status status="PASS" start="2024-05-02T21:28:20.446323" elapsed="10.046781"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_server_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.494613" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/api-application.log"&gt;/tests/resources/api-application.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:28:30.495773" level="INFO">${API_SERVER_LOG_CONTENTS} = [9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a documen...</msg>
<var>${API_SERVER_LOG_CONTENTS}</var>
<arg>${EXECDIR}/resources/api-application.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:28:30.494422" elapsed="0.001408"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:28:30.496225" level="INFO">[9:27:15 PM] › [CLI] …  awaiting  Starting Prism…
[9:27:15 PM] › [CLI] ✖  fatal     
prism mock &lt;document&gt;

Start a mock server with the given document file

Positionals:
  document  Path to a document file. Can be both a file or a fetchable resource on the web.  [string] [required]

Options:
      --version                           Show version number  [boolean]
      --help                              Show help  [boolean]
  -p, --port                              Port that Prism will run on.  [number] [required] [default: 4010]
  -h, --host                              Host that Prism will listen to.  [string] [required] [default: "127.0.0.1"]
      --cors                              Enables CORS headers.  [boolean] [default: true]
  -m, --multiprocess                      Forks the http server from the CLI for faster log processing.  [boolean] [default: false]
      --errors                            Specifies whether request/response violations marked as errors will produce an error response  [boolean] [required] [default: false]
  -v, --verboseLevel                      Turns on verbose logging.  [required] [choices: "trace", "debug", "info", "warn", "error", "fatal", "silent"] [default: "info"]
  -d, --dynamic                           Dynamically generate examples.  [boolean] [default: false]
      --json-schema-faker-fillProperties  Generate additional properties when using dynamic generation.  [boolean]
      --ignoreExamples                    Tell Prism to treat the spec as though it has no examples. When in static mode,
                                                                  returns an example that has not been generated using json-schema-faker, but was
                                                                  created by Prism. When in dynamic mode, this flag is ignored, since in dynamic mode,
                                                                  examples are not consulted and json-schema-faker is used to generate a response based
                                                                  on the schema defined in the spec  [boolean] [default: false]

listen EADDRINUSE: address already in use 0.0.0.0:4010
</msg>
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:28:30.496034" elapsed="0.000290"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${API_SERVER_LOG_CONTENTS}</arg>
<arg>UnhandledPromiseRejectionWarning</arg>
<arg>Unhandled</arg>
<arg>ERR_INVALID_CHAR</arg>
<arg>rejection</arg>
<arg>exception</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:28:30.496461" elapsed="0.000165"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:30.494097" elapsed="0.002619"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:30.493417" elapsed="0.003450"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_server_log_files</var>
<status status="PASS" start="2024-05-02T21:28:30.493262" elapsed="0.003662"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="send_get_request_to_pets_endpoint">
<kw name="Run HTTPStat GET Request">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.499153" level="INFO" html="true">Removed file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:28:30.498217" elapsed="0.001064"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:28:30.500791" level="INFO">Running command 'go run httpstat-test-runner.go -url "http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available" -method "GET" &gt; /tests/resources/httpstat-graphwalker-response-output.log'.</msg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:28:30.499873" elapsed="10.334048"/>
</kw>
<arg>Run</arg>
<arg>go run httpstat-test-runner.go -url "${TARGET_URL}" -method "${REQUEST_METHOD}" &gt; ${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2024-05-02T21:28:30.499585" elapsed="10.334507"/>
</kw>
<arg>http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available</arg>
<arg>GET</arg>
<status status="PASS" start="2024-05-02T21:28:30.497818" elapsed="10.336400"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:30.497480" elapsed="10.336839"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:30.497175" elapsed="10.337221"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">send_get_request_to_pets_endpoint</var>
<status status="PASS" start="2024-05-02T21:28:30.497057" elapsed="10.337403"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:28:40.836628" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:28:40.837982" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:28:40.836402" elapsed="0.001627"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:28:40.838597" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10007 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:28:40.838209" elapsed="0.000460"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:28:40.838919" elapsed="0.000206"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:40.836111" elapsed="0.003126"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:40.835606" elapsed="0.003698"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:28:40.835410" elapsed="0.003949"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="add_toxiproxy_limited_bandwidth_then_send_user_get_request">
<kw name="Remove All Three Toxics" owner="ToxiproxyChaosTestLibrary">
<doc>Remove all three toxics from the exploratory-testing-proxy.</doc>
<status status="PASS" start="2024-05-02T21:28:40.840369" elapsed="5.015238"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:29:15.857959" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:28:45.856249" elapsed="30.001998"/>
</kw>
<kw name="Add Limited Bandwidth Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Limited Bandwidth Toxic to the Vegeta load tests. It will limit a connection to a maximum number of kilobytes per second.</doc>
<status status="PASS" start="2024-05-02T21:29:15.859114" elapsed="5.008754"/>
</kw>
<status status="PASS" start="2024-05-02T21:28:40.840050" elapsed="40.028052"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:28:40.839619" elapsed="40.028593"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">add_toxiproxy_limited_bandwidth_then_send_user_get_request</var>
<status status="PASS" start="2024-05-02T21:28:40.839493" elapsed="40.028794"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:29:20.869805" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:29:20.871614" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:29:20.869586" elapsed="0.002084"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:29:20.872107" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10007 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:29:20.871897" elapsed="0.000289"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:29:20.872373" elapsed="0.000228"/>
</kw>
<status status="PASS" start="2024-05-02T21:29:20.869192" elapsed="0.003606"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:29:20.868741" elapsed="0.004142"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:29:20.868544" elapsed="0.004406"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="add_toxiproxy_latency_then_send_user_get_request">
<kw name="Remove All Three Toxics" owner="ToxiproxyChaosTestLibrary">
<doc>Remove all three toxics from the exploratory-testing-proxy.</doc>
<status status="PASS" start="2024-05-02T21:29:20.874103" elapsed="5.016112"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<msg time="2024-05-02T21:29:55.892709" level="INFO">Slept 30 seconds.</msg>
<arg>30 seconds</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="PASS" start="2024-05-02T21:29:25.890868" elapsed="30.002097"/>
</kw>
<kw name="Add Latency Toxic" owner="ToxiproxyChaosTestLibrary">
<doc>Add the Latency Toxic to the Vegeta load tests. It will add a delay to all data going through the proxy.</doc>
<status status="PASS" start="2024-05-02T21:29:55.893572" elapsed="5.008311"/>
</kw>
<status status="PASS" start="2024-05-02T21:29:20.873774" elapsed="40.028442"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:29:20.873268" elapsed="40.029267"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">add_toxiproxy_latency_then_send_user_get_request</var>
<status status="PASS" start="2024-05-02T21:29:20.873113" elapsed="40.029570"/>
</iter>
<iter>
<kw name="Run Keyword" owner="BuiltIn">
<kw name="check_api_response_log_files">
<kw name="Get File" owner="OperatingSystem">
<msg time="2024-05-02T21:30:00.905415" level="INFO" html="true">Getting file '&lt;a href="file:///tests/resources/httpstat-graphwalker-response-output.log"&gt;/tests/resources/httpstat-graphwalker-response-output.log&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:30:00.910631" level="INFO">${HTTPSTAT_RESPONSE_CONTENTS} = --------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-900719925474099...</msg>
<var>${HTTPSTAT_RESPONSE_CONTENTS}</var>
<arg>${EXECDIR}/resources/httpstat-graphwalker-response-output.log</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2024-05-02T21:30:00.905020" elapsed="0.005689"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:30:00.911298" level="INFO">--------------
URL: http://0.0.0.0:8080/no_auth/pets/findByStatus?status=available
Method: GET
Status Code: 200
--------------
Response Body:
[{"id":-9007199254740991,"category":{"id":-9007199254740991,"name":"string"},"name":"doggie","photoUrls":["string"],"tags":[{"id":-9007199254740991,"name":"string"}],"status":"available"}]
--------------
Metrics:
DNS lookup:           0 ms
TCP connection:       0 ms
TLS handshake:        0 ms
Server processing: 10007 ms
Content transfer:     0 ms

Name Lookup:       0 ms
Connect:           0 ms
Pre Transfer:      0 ms
Start Transfer: 10007 ms
Total:          10008 ms

</msg>
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:30:00.911022" elapsed="0.000450"/>
</kw>
<kw name="Should Not Contain Any" owner="BuiltIn">
<arg>${HTTPSTAT_RESPONSE_CONTENTS}</arg>
<arg>ERROR</arg>
<arg>error</arg>
<arg>errors</arg>
<arg>Not Allowed</arg>
<arg>no method</arg>
<arg>NO_METHOD_MATCHED_ERROR</arg>
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<status status="PASS" start="2024-05-02T21:30:00.911705" elapsed="0.000279"/>
</kw>
<status status="PASS" start="2024-05-02T21:30:00.904497" elapsed="0.007651"/>
</kw>
<arg>${GRAPHWALKER_PATH_KEYWORD}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="PASS" start="2024-05-02T21:30:00.903514" elapsed="0.008733"/>
</kw>
<var name="${GRAPHWALKER_PATH_KEYWORD}">check_api_response_log_files</var>
<status status="PASS" start="2024-05-02T21:30:00.903052" elapsed="0.009335"/>
</iter>
<var>${GRAPHWALKER_PATH_KEYWORD}</var>
<value>@{GRAPHWALKER_CSV_LINES}</value>
<status status="PASS" start="2024-05-02T21:18:56.063617" elapsed="664.848882"/>
</for>
<arg>${GRAPHWALKER_PATH_LINES}</arg>
<status status="PASS" start="2024-05-02T21:18:56.063371" elapsed="664.849299"/>
</kw>
<arg>GraphwalkerPath.csv</arg>
<status status="PASS" start="2024-05-02T21:18:56.059161" elapsed="664.853627"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:30:00.913499" elapsed="0.000268"/>
</kw>
<status status="PASS" start="2024-05-02T21:30:00.913101" elapsed="0.000812"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:30:00.915062" elapsed="0.000146"/>
</kw>
<status status="PASS" start="2024-05-02T21:30:00.914597" elapsed="0.000726"/>
</kw>
<tag>Chaos_Tests</tag>
<tag>Exploratory_Tests</tag>
<tag>Model-Based_Tests</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:18:56.055510" elapsed="664.860097"/>
</test>
<test id="s1-t5" name="VEGETA CHAOS LOAD TESTS - RAMP UP RUNNER : Run the Vegeta Load Tests that connect to Toxiproxy and ramp up." line="53">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:30:00.918150" level="INFO">${AUTOMATION_SECTION_NAME} = VEGETA CHAOS LOAD TESTS - RAMP UP</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:30:00.917809" elapsed="0.000411"/>
</kw>
<arg>VEGETA CHAOS LOAD TESTS - RAMP UP</arg>
<status status="PASS" start="2024-05-02T21:30:00.917075" elapsed="0.001311"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:30:00.918969" elapsed="0.000333"/>
</kw>
<status status="PASS" start="2024-05-02T21:30:00.918668" elapsed="0.000810"/>
</kw>
<kw name="Run Ramp Up Load Test Connected To Toxiproxy">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:30:00.922299" level="INFO" html="true">File '&lt;a href="file:///tests/*.bin"&gt;/tests/*.bin&lt;/a&gt;' does not exist.</msg>
<arg>${EXECDIR}/*.bin</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:30:00.920108" elapsed="0.002316"/>
</kw>
<kw name="Run Vegeta Ramp Up Load Test" owner="VegetaLoadTestLibrary">
<msg time="2024-05-02T21:41:34.828383" level="INFO">Running Vegeta load test: go run vegeta-load-test-runner.go -rate 50 -duration 30s -url http://0.0.0.0:8080/user/vitae -method GET -output results-0.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 1500
StatusCodes: map[200:1500]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.012015028s
 - 50th percentile: 10.009029205s
 - 95th percentile: 10.012915231s
 - 99th percentile: 10.166679127s
 - Max: 10.250103748s



Running Vegeta load test: go run vegeta-load-test-runner.go -rate 100 -duration 60s -url http://0.0.0.0:8080/user/vitae -method GET -output results-1.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 6000
StatusCodes: map[200:6000]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.006324125s
 - 50th percentile: 10.005571311s
 - 95th percentile: 10.007422763s
 - 99th percentile: 10.019265371s
 - Max: 10.117840221s



Running Vegeta load test: go run vegeta-load-test-runner.go -rate 150 -duration 90s -url http://0.0.0.0:8080/user/vitae -method GET -output results-2.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 13500
StatusCodes: map[200:13500]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.006611032s
 - 50th percentile: 10.005270488s
 - 95th percentile: 10.007265348s
 - 99th percentile: 10.05925853s
 - Max: 10.154055919s



Running Vegeta load test: go run vegeta-load-test-runner.go -rate 200 -duration 120s -url http://0.0.0.0:8080/user/vitae -method GET -output results-3.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 24000
StatusCodes: map[200:24000]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.008419267s
 - 50th percentile: 10.005127193s
 - 95th percentile: 10.018116337s
 - 99th percentile: 10.107421532s
 - Max: 10.202116002s



Running Vegeta load test: go run vegeta-load-test-runner.go -rate 250 -duration 150s -url http://0.0.0.0:8080/user/vitae -method GET -output results-4.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 37500
StatusCodes: map[200:37500]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.008255918s
 - 50th percentile: 10.00513733s
 - 95th percentile: 10.022106053s
 - 99th percentile: 10.095361758s
 - Max: 10.174167652s



Running Vegeta load test: go run vegeta-load-test-runner.go -rate 300 -duration 180s -url http://0.0.0.0:8080/user/vitae -method GET -output results-5.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 54000
StatusCodes: map[200:54000]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.120901285s
 - 50th percentile: 10.006083738s
 - 95th percentile: 10.567148677s
 - 99th percentile: 12.229662611s
 - Max: 12.400269419s</msg>
<arg>http://0.0.0.0:8080/user/vitae</arg>
<arg>GET</arg>
<doc>Runs the vegeta-load-test-runner.go automation with a ramp up mechanism.</doc>
<status status="PASS" start="2024-05-02T21:30:00.922613" elapsed="693.907532"/>
</kw>
<kw name="Move Files" owner="OperatingSystem">
<msg time="2024-05-02T21:41:34.836807" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-4.bin"&gt;/tests/results-4.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-4.bin"&gt;/tests/results/results-4.bin&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:41:34.843761" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-5.bin"&gt;/tests/results-5.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-5.bin"&gt;/tests/results/results-5.bin&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:41:34.846921" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-1.bin"&gt;/tests/results-1.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-1.bin"&gt;/tests/results/results-1.bin&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:41:34.849950" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-0.bin"&gt;/tests/results-0.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-0.bin"&gt;/tests/results/results-0.bin&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:41:34.854671" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-2.bin"&gt;/tests/results-2.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-2.bin"&gt;/tests/results/results-2.bin&lt;/a&gt;'.</msg>
<msg time="2024-05-02T21:41:34.858627" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results-3.bin"&gt;/tests/results-3.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results-3.bin"&gt;/tests/results/results-3.bin&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/*.bin</arg>
<arg>${EXECDIR}/results/</arg>
<doc>Moves specified files to the target directory.</doc>
<status status="PASS" start="2024-05-02T21:41:34.830536" elapsed="0.028251"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Vegeta Load Test Completed</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:34.859178" elapsed="0.001055"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Check the results.bin files found in... ${EXECDIR}/results</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:34.861018" elapsed="0.000899"/>
</kw>
<status status="PASS" start="2024-05-02T21:30:00.919786" elapsed="693.942546"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:34.863976" elapsed="0.000806"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:34.863115" elapsed="0.001889"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:34.866685" elapsed="0.000227"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:34.866013" elapsed="0.001014"/>
</kw>
<tag>Chaos_Tests</tag>
<tag>Load_Tests</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:30:00.915996" elapsed="693.951223"/>
</test>
<test id="s1-t6" name="VEGETA CHAOS LOAD TESTS - CUSTOMIZED PARAMETERS RUNNER : Run the Vegeta Load Tests with custom user defined parameters. This can run for seconds, minutes, hours, days etc. as long as the duration is given a valid amount of seconds." line="60">
<kw name="Automation Section For Slack Notifications">
<kw name="Set Suite Variable" owner="BuiltIn">
<msg time="2024-05-02T21:41:34.871289" level="INFO">${AUTOMATION_SECTION_NAME} = VVEGETA CHAOS LOAD TESTS - CUSTOMIZED PARAMETERS</msg>
<arg>${AUTOMATION_SECTION_NAME}</arg>
<arg>${AUTOMATION_SECTION}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" start="2024-05-02T21:41:34.870362" elapsed="0.001034"/>
</kw>
<arg>VVEGETA CHAOS LOAD TESTS - CUSTOMIZED PARAMETERS</arg>
<status status="PASS" start="2024-05-02T21:41:34.869779" elapsed="0.001853"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:34.872682" elapsed="0.000442"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:34.872008" elapsed="0.001286"/>
</kw>
<kw name="Run Custom Vegeta Load Test Connected To Toxiproxy">
<kw name="Remove File" owner="OperatingSystem">
<msg time="2024-05-02T21:41:34.876810" level="INFO" html="true">File '&lt;a href="file:///tests/*.bin"&gt;/tests/*.bin&lt;/a&gt;' does not exist.</msg>
<arg>${EXECDIR}/*.bin</arg>
<doc>Removes a file with the given path.</doc>
<status status="PASS" start="2024-05-02T21:41:34.874739" elapsed="0.002196"/>
</kw>
<kw name="Run Specific Parameters Vegeta Load Test" owner="VegetaLoadTestLibrary">
<msg time="2024-05-02T21:41:55.245096" level="INFO">Running Vegeta load test: go run vegeta-load-test-runner.go -rate 100 -duration 10s -url http://0.0.0.0:8080/store/order/9 -method GET -body  -output results.bin
Vegeta load test executed successfully: 

Vegeta Load Test Runner - Results


Requests: 1000
StatusCodes: map[200:1000]
Errors []
Success Rate: 100 %
Latencies (ms):
 - Mean: 10.008181761s
 - 50th percentile: 10.007061351s
 - 95th percentile: 10.010310765s
 - 99th percentile: 10.043751597s
 - Max: 10.095628553s</msg>
<arg>${USER_DEFINED_TEST_RATE}</arg>
<arg>${USER_DEFINED_TEST_DURATION}</arg>
<arg>${USER_DEFINED_URL}</arg>
<arg>${USER_DEFINED_METHOD}</arg>
<arg>${USER_DEFINED_TEST_REQUEST_BODY}</arg>
<arg>${USER_DEFINED_TEST_OUTPUT_FILE}</arg>
<doc>Runs the vegeta-load-test-runner.go automation with specific given parameters for more customization.</doc>
<status status="PASS" start="2024-05-02T21:41:34.877163" elapsed="20.369182"/>
</kw>
<kw name="Move Files" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.251601" level="INFO" html="true">Moved file from '&lt;a href="file:///tests/results.bin"&gt;/tests/results.bin&lt;/a&gt;' to '&lt;a href="file:///tests/results/results.bin"&gt;/tests/results/results.bin&lt;/a&gt;'.</msg>
<arg>${EXECDIR}/*.bin</arg>
<arg>${EXECDIR}/results/</arg>
<doc>Moves specified files to the target directory.</doc>
<status status="PASS" start="2024-05-02T21:41:55.246667" elapsed="0.005086"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Vegeta Load Test Completed</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.252111" elapsed="0.000301"/>
</kw>
<kw name="Log To Console" owner="BuiltIn">
<arg>Check the results.bin files found in... ${EXECDIR}/results</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.252623" elapsed="0.000432"/>
</kw>
<arg>http://0.0.0.0:8080/store/order/9</arg>
<status status="PASS" start="2024-05-02T21:41:34.874029" elapsed="20.379179"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.254366" elapsed="0.000295"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.253684" elapsed="0.001098"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.255795" elapsed="0.000334"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.255376" elapsed="0.000873"/>
</kw>
<tag>Chaos_Tests</tag>
<tag>Load_Tests</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:34.868020" elapsed="20.388383"/>
</test>
<test id="s1-t7" name="GO TEST FUNCTIONAL TESTS - GET /USER/USERNAME : Analyze the Go Httpstat functional test for a GET request on the /user/vitae API endpoint" line="67">
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.258224" elapsed="0.000316"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.257710" elapsed="0.000950"/>
</kw>
<kw name="Analyze Go Test Results">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.260670" level="INFO">Running command 'cat /tests/resources/go-test-console-results.log | grep vitae 2&gt;&amp;1'.</msg>
<msg time="2024-05-02T21:41:55.265644" level="INFO">${GO_TEST_OUTPUT_CONTENTS} =   "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/user/vitae (0.08s)\n"</msg>
<var>${GO_TEST_OUTPUT_CONTENTS}</var>
<arg>cat ${EXECDIR}/resources/go-test-console-results.log | grep ${GO_TEST_OUTPUT_CHECK1}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:41:55.259649" elapsed="0.006073"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:41:55.266345" level="INFO">  "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/user/vitae (0.08s)\n"</msg>
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:41:55.266109" elapsed="0.000320"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<arg>${GO_TEST_OUTPUT_CHECK2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2024-05-02T21:41:55.266666" elapsed="0.000301"/>
</kw>
<arg>vitae</arg>
<arg>PASS</arg>
<status status="PASS" start="2024-05-02T21:41:55.259110" elapsed="0.007962"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.267669" elapsed="0.000405"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.267357" elapsed="0.000856"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.269283" elapsed="0.000163"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.268677" elapsed="0.000864"/>
</kw>
<tag>Functional_Tests</tag>
<tag>Functional_Tests_Analysis</tag>
<tag>robot:skip-on-failure</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:55.256901" elapsed="0.012789"/>
</test>
<test id="s1-t8" name="GO TEST FUNCTIONAL TESTS - GET /NO_AUTH/PETS/FINDBYSTATUS : Analyze the Go Httpstat functional test for a GET request on the /no_auth/pets/findByStatus API endpoint" line="73">
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.271635" elapsed="0.000794"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.271221" elapsed="0.001385"/>
</kw>
<kw name="Analyze Go Test Results">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.275001" level="INFO">Running command 'cat /tests/resources/go-test-console-results.log | grep findByStatus 2&gt;&amp;1'.</msg>
<msg time="2024-05-02T21:41:55.278925" level="INFO">${GO_TEST_OUTPUT_CONTENTS} =   "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/no_auth/pets/findByStatus?status=available (0.03s)\n"</msg>
<var>${GO_TEST_OUTPUT_CONTENTS}</var>
<arg>cat ${EXECDIR}/resources/go-test-console-results.log | grep ${GO_TEST_OUTPUT_CHECK1}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:41:55.273863" elapsed="0.005118"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:41:55.279368" level="INFO">  "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/no_auth/pets/findByStatus?status=available (0.03s)\n"</msg>
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:41:55.279190" elapsed="0.000227"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<arg>${GO_TEST_OUTPUT_CHECK2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2024-05-02T21:41:55.279539" elapsed="0.000169"/>
</kw>
<arg>findByStatus</arg>
<arg>PASS</arg>
<status status="PASS" start="2024-05-02T21:41:55.273076" elapsed="0.006709"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.280405" elapsed="0.000235"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.280069" elapsed="0.000689"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.282617" elapsed="0.000125"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.281326" elapsed="0.001588"/>
</kw>
<tag>Functional_Tests</tag>
<tag>Functional_Tests_Analysis</tag>
<tag>robot:skip-on-failure</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:55.270255" elapsed="0.012804"/>
</test>
<test id="s1-t9" name="GO TEST FUNCTIONAL TESTS - GET /STORE/ORDER/NUMBER : Analyze the Go Httpstat functional test for a GET request on the /store/order/9 API endpoint" line="79">
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.284585" elapsed="0.000246"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.284257" elapsed="0.000806"/>
</kw>
<kw name="Analyze Go Test Results">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.286420" level="INFO">Running command 'cat /tests/resources/go-test-console-results.log | grep store/order/9 2&gt;&amp;1'.</msg>
<msg time="2024-05-02T21:41:55.289763" level="INFO">${GO_TEST_OUTPUT_CONTENTS} =   "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/store/order/9 (0.02s)\n"</msg>
<var>${GO_TEST_OUTPUT_CONTENTS}</var>
<arg>cat ${EXECDIR}/resources/go-test-console-results.log | grep ${GO_TEST_OUTPUT_CHECK1}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:41:55.285645" elapsed="0.004175"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:41:55.290397" level="INFO">  "Output": "    --- PASS: TestHTTPRequests/GET_http://0.0.0.0:4010/store/order/9 (0.02s)\n"</msg>
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:41:55.290125" elapsed="0.000340"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<arg>${GO_TEST_OUTPUT_CHECK2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2024-05-02T21:41:55.290638" elapsed="0.000201"/>
</kw>
<arg>store/order/9</arg>
<arg>PASS</arg>
<status status="PASS" start="2024-05-02T21:41:55.285332" elapsed="0.005594"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.291554" elapsed="0.000342"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.291232" elapsed="0.003930"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.296669" elapsed="0.000145"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.296159" elapsed="0.000756"/>
</kw>
<tag>Functional_Tests</tag>
<tag>Functional_Tests_Analysis</tag>
<tag>robot:skip-on-failure</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:55.283512" elapsed="0.013648"/>
</test>
<test id="s1-t10" name="GO TEST FUNCTIONAL TESTS - POST /STORE/ORDER : Analyze the Go Httpstat functional test for a POST request on the /store/order API endpoint. This will create a new order." line="85">
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.299302" elapsed="0.000758"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.298752" elapsed="0.001685"/>
</kw>
<kw name="Analyze Go Test Results">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.304550" level="INFO">Running command 'cat /tests/resources/go-test-console-results.log | grep POST_http://0.0.0.0:4010/store/order 2&gt;&amp;1'.</msg>
<msg time="2024-05-02T21:41:55.308743" level="INFO">${GO_TEST_OUTPUT_CONTENTS} =   "Output": "    --- PASS: TestHTTPRequests/POST_http://0.0.0.0:4010/store/order (0.03s)\n"</msg>
<var>${GO_TEST_OUTPUT_CONTENTS}</var>
<arg>cat ${EXECDIR}/resources/go-test-console-results.log | grep ${GO_TEST_OUTPUT_CHECK1}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:41:55.302611" elapsed="0.006183"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:41:55.309287" level="INFO">  "Output": "    --- PASS: TestHTTPRequests/POST_http://0.0.0.0:4010/store/order (0.03s)\n"</msg>
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:41:55.309001" elapsed="0.000331"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<arg>${GO_TEST_OUTPUT_CHECK2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2024-05-02T21:41:55.309454" elapsed="0.000160"/>
</kw>
<arg>POST_http://0.0.0.0:4010/store/order</arg>
<arg>PASS</arg>
<status status="PASS" start="2024-05-02T21:41:55.301337" elapsed="0.008387"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.310521" elapsed="0.000239"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.310185" elapsed="0.000795"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.311907" elapsed="0.000144"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.311438" elapsed="0.000707"/>
</kw>
<tag>Functional_Tests</tag>
<tag>Functional_Tests_Analysis</tag>
<tag>robot:skip-on-failure</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:55.297695" elapsed="0.014586"/>
</test>
<test id="s1-t11" name="GO TEST FUNCTIONAL TESTS - POST /USER : Analyze the Go Httpstat functional test for a POST request on the /user API endpoint. This will create a new user." line="91">
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.316047" elapsed="0.000508"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.315087" elapsed="0.001632"/>
</kw>
<kw name="Analyze Go Test Results">
<kw name="Run" owner="OperatingSystem">
<msg time="2024-05-02T21:41:55.319916" level="INFO">Running command 'cat /tests/resources/go-test-console-results.log | grep POST_http://0.0.0.0:4010/user 2&gt;&amp;1'.</msg>
<msg time="2024-05-02T21:41:55.323029" level="INFO">${GO_TEST_OUTPUT_CONTENTS} =   "Output": "    --- PASS: TestHTTPRequests/POST_http://0.0.0.0:4010/user (0.02s)\n"</msg>
<var>${GO_TEST_OUTPUT_CONTENTS}</var>
<arg>cat ${EXECDIR}/resources/go-test-console-results.log | grep ${GO_TEST_OUTPUT_CHECK1}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<status status="PASS" start="2024-05-02T21:41:55.318989" elapsed="0.004105"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2024-05-02T21:41:55.323489" level="INFO">  "Output": "    --- PASS: TestHTTPRequests/POST_http://0.0.0.0:4010/user (0.02s)\n"</msg>
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2024-05-02T21:41:55.323314" elapsed="0.000225"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${GO_TEST_OUTPUT_CONTENTS}</arg>
<arg>${GO_TEST_OUTPUT_CHECK2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2024-05-02T21:41:55.323662" elapsed="0.000168"/>
</kw>
<arg>POST_http://0.0.0.0:4010/user</arg>
<arg>PASS</arg>
<status status="PASS" start="2024-05-02T21:41:55.317225" elapsed="0.007427"/>
</kw>
<kw name="Log Lines To Console">
<kw name="Log To Console" owner="BuiltIn">
<arg>...\n...\n...\n...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" start="2024-05-02T21:41:55.325264" elapsed="0.000198"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.324980" elapsed="0.000586"/>
</kw>
<kw name="Trigger Only After Failure" type="TEARDOWN">
<kw name="Run Keyword If Test Failed" owner="BuiltIn">
<arg>Automation Failure Detected Notify Team</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<status status="PASS" start="2024-05-02T21:41:55.326519" elapsed="0.000126"/>
</kw>
<status status="PASS" start="2024-05-02T21:41:55.326014" elapsed="0.000718"/>
</kw>
<tag>Functional_Tests</tag>
<tag>Functional_Tests_Analysis</tag>
<tag>robot:skip-on-failure</tag>
<tag>Run_All_Tests</tag>
<status status="PASS" start="2024-05-02T21:41:55.312798" elapsed="0.014076"/>
</test>
<status status="PASS" start="2024-05-02T21:18:17.842092" elapsed="1417.485525"/>
</suite>
<statistics>
<total>
<stat pass="11" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="0" skip="0">Chaos_Tests</stat>
<stat pass="1" fail="0" skip="0">Exploratory_Tests</stat>
<stat pass="5" fail="0" skip="0">Functional_Tests</stat>
<stat pass="5" fail="0" skip="0">Functional_Tests_Analysis</stat>
<stat pass="2" fail="0" skip="0">Load_Tests</stat>
<stat pass="1" fail="0" skip="0">Model-Based_Tests</stat>
<stat pass="11" fail="0" skip="0">Run_All_Tests</stat>
<stat pass="3" fail="0" skip="0">Tests_Setup</stat>
</tag>
<suite>
<stat pass="11" fail="0" skip="0" id="s1" name="Generic-Automation">Generic-Automation</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
